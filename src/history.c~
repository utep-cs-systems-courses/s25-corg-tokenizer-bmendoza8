#include "history.h"

typedef struct s_Item {
  int id;
  char *str;
  struct s_Item *next;
} Item;

typedef struct s_List {
  struct s_Item *root;
} List;

/* Initialize the linked list to keep the history. */
List* init_history(){
  List *list = (List*)malloc(sizeof(List));
  if (!list) {
    fprintf(stderr, "Memory allocation failed\n");
    exit(EXIT_FAILURE);
  }
  list->root = NULL;
  return list;
}
/* Add a history item to the end of the list.
   List* list - the linked list
   char* str - the string to store
*/
void add_history(List *list, char *str){
  if (!list || !str) return;

  Item *new_item = (Item*)malloc(sizeof(Item));
  if (!new_item) {
    fprintf(stderr, "Memory allocation failed\n");
    exit(EXIT_FAILURE);
  }

  new_item->id = (list->root == NULL) ? 1 : list->root->id + 1;
  new_item->str = strdup(str);
  if (!new_item->str) {
    fprintf(stderr, "Memory allocation failed\n");
    free(new_item);
    exit(EXIT_FAILURE);
  }
  new_item->next = list->root;
  list->root = new_item;
}
/* Retrieve the string stored in the node where Item->id == id.
   List* list - the linked list
   int id - the id of the Item to find */
const char *get_history(List *list, int id){
  if (!list) return NULL;

  Item *current = list->root;
  while (current) {
    if (current->id == id) {
      return current->str;
    }
    current = current->next;
  }
  return NULL;
}
/*Print the entire contents of the list. */
void print_history(List *list){
  if (!list) return;

  Item *current = list->root;
  while (current) {
    printf("[%d] %s\n", current->id, current->str);
    current = current->next;
  }
}
/*Free the history list and the strings it references. */
void free_history(List *list){
  if (!list) return;

  Item *current = list->root;
  while (current) {
    Item *temp = current;
    current = current->next;
    free(temp->str);
    free(temp);
  }
  free(list);
}
#endif
